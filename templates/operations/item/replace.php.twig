<?php

declare(strict_types=1);

namespace {{ rootNamespace }}\Ports\Operation\{{ entityClassName }};

use {{ entityNamespace }};
use {{ resourceNamespace }};
use Gorynych\Operation\AbstractOperation;
use Symfony\Component\HttpFoundation\Request;

/**
 * @OA\Put(
 *     path="/{{ entityClassName|lower ~ 's' }}/{id}",
 *     summary="Replaces given {{ entityClassName }} resource with new one.",
 *     tags={"{{ entityClassName }}"},
 *     @OA\Parameter(
 *         name="id",
 *         in="path",
 *         required=true,
 *         @OA\Schema(type="integer")
 *     ),
 *     @OA\RequestBody(
 *         @OA\JsonContent(ref="#/components/schemas/{{ entityClassName }}"),
 *     ),
 *     @OA\Response(
 *         response="200",
 *         description="Replaced {{ entityClassName }} resource IRI.",
 *     )
 * )
 */
final class ReplaceOperation extends AbstractOperation
{
    /** @var {{ resourceClassName }} */
    protected $resource;

    /**
     * {@inheritdoc}
     */
    public function getMethod(): string
    {
        return AbstractOperation::PUT_METHOD;
    }

    /**
     * {@inheritdoc}
     */
    public function getPath(): string
    {
        return '/';
    }

{% set entityVar = '$' ~ entityClassName|lower %}
{% set newEntityVar = '$new' ~ entityClassName %}
    /**
     * @param Request $request
     * @return string
     */
    public function __invoke(Request $request): string
    {
        {{ entityVar }} = $this->resource->retrieve();

        /** @var {{ entityClassName }} {{ newEntityVar }} */
        {{ newEntityVar }} = $this->deserializeBody($request, {{ entityClassName }}::class);
        {{ newEntityVar }}->setId({{ entityVar }}->getId());

        $this->validate({{ newEntityVar }}, '{{ entityClassName }}');
        $this->resource->replace({{ newEntityVar }});

        return $this->resource::PATH . {{ newEntityVar }}->getId();
    }
}
