<?php

declare(strict_types=1);

namespace {{ rootNamespace }}\Ports\Operation\{{ entityClassName }};

use {{ entityNamespace }};
use {{ resourceNamespace }};
use Gorynych\Operation\AbstractOperation;

/**
 * @OA\Put(
 *     path="/{{ resourceSimpleName }}/{id}",
 *     summary="Replaces given {{ entityClassName }} resource with new one.",
 *     tags={"{{ entityClassName }}"},
 *     @OA\Parameter(
 *         name="id",
 *         in="path",
 *         required=true,
 *         @OA\Schema(type="integer"),
 *     ),
 *     @OA\RequestBody(
 *         @OA\JsonContent(ref="#/components/schemas/{{ entityClassName }}"),
 *     ),
 *     @OA\Response(
 *         response="200",
 *         description="Replaced {{ entityClassName }} resource IRI.",
 *         @OA\JsonContent(
 *             @OA\Property(
 *                 property="data",
 *                 type="object",
 *                 example={"@id":"/{{ resourceSimpleName }}/1"},
 *             ),
 *         ),
 *     ),
 *     @OA\Response(
 *         response="400",
 *         description="Bad request.",
 *     ),
 *     @OA\Response(
 *         response="404",
 *         description="Resource not found.",
 *     ),
 * )
 */
final class ReplaceOperation extends AbstractOperation
{
    /** @var {{ resourceClassName }} */
    protected $resource;

    /**
     * {@inheritdoc}
     */
    public function getMethod(): string
    {
        return AbstractOperation::PUT_METHOD;
    }

    /**
     * {@inheritdoc}
     */
    public function getPath(): string
    {
        return '/';
    }

{% set newEntityVar = '$new' ~ entityClassName %}
    /**
     * @return string[]
     */
    public function __invoke({{ entityClassName }} {{ newEntityVar }}): array
    {
        return ['@id' => $this->resource->replace({{ newEntityVar }})];
    }
}
